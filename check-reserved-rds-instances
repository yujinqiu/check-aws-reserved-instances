#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import argparse
import datetime

import boto3.session
import six
from dateutil.tz import tzutc

parser = argparse.ArgumentParser(
    description="Shows summary about 'Reserved' and 'On-demand' rds instances")
parser.add_argument("--aws-access-key", type=str, default=None,
                    help="AWS Access Key ID. Defaults to the value of the "
                         "AWS_ACCESS_KEY_ID environment variable (if set)")
parser.add_argument("--aws-secret-key", type=str, default=None,
                    help="AWS Secret Access Key. Defaults to the value of the "
                         "AWS_SECRET_ACCESS_KEY environment variable (if set)")
parser.add_argument("--region", type=str, default="cn-north-1",
                    help="AWS Region name. Default is 'cn-north-1'")
parser.add_argument("-w", "--warn-time", type=int, default=30,
                    help="Expire period for reserved instances in days. "
                         "Default is '30 days'")
parser.add_argument("-e", "--expire-time", type=int, default=7,
                    help="Expired period for reserved instances in days. "
                         "Default is '7 days'")
parser.add_argument("-o", "--order-time", type=int, default=7,
                    help="Payment period for reserved instances in days. "
                         "Default is '7 days'")

args = parser.parse_args()


session = boto3.session.Session(region_name=args.region,
                                aws_access_key_id=args.aws_access_key,
                                aws_secret_access_key=args.aws_secret_key)

rds_client = session.client('rds')

instances = rds_client.describe_db_instances()['DBInstances']

def normalized_engine(name):
    engine = {}
    engine['postgres'] = 'postgresql'
    return engine.get(name, name)
def instance_header():
    return ("\t%s\t%12s\t%s\t%s" %("Count", "Engine", "Instance", "Multi-AZ"))
def expire_header():
    return ("\t%s\t%-30s%-32s%-18s%-14s%-10s" %("Count", "ID", "Type", "Engine", "Region", "Expire"))

running_instances = {}
for i in instances:
    if i['DBInstanceStatus'] != 'available':
        continue
    if not i['AvailabilityZone'].startswith(args.region):
        continue
    a_zone = args.region
    db_engine = normalized_engine(i['Engine'])
    key = (db_engine, i['DBInstanceClass'], a_zone, i['MultiAZ'])
    running_instances[key] = running_instances.get(key, 0) + 1

reserved_instances = {}
soon_expire_ri = {}
expire_ri = {}
new_order_ri = {}

reserved_rds_instances = rds_client.describe_reserved_db_instances()
reservations = reserved_rds_instances['ReservedDBInstances']  # noqa
now = datetime.datetime.utcnow().replace(tzinfo=tzutc())
for ri in reservations:
    ri_start_time = ri['StartTime']
    expire_time = ri_start_time + datetime.timedelta(seconds=ri['Duration']) 
    ri_id = ri['ReservedDBInstanceId']
    ri_type = ri['DBInstanceClass']
    ri_count = ri['DBInstanceCount']
    ri_engine = ri['ProductDescription']
    ri_multiaz = ri['MultiAZ']
    key = (ri_engine, ri_type, args.region, ri_multiaz)

    if ri['State'] == 'retired':
        if (now - expire_time)  < datetime.timedelta(days=args.expire_time):
            expire_ri[ri_id] = (ri_type, ri_engine, args.region, expire_time, ri_count)
        continue

    reserved_instances[key] = \
        reserved_instances.get(key, 0) + ri_count

    if (expire_time - now) < datetime.timedelta(days=args.warn_time):
        soon_expire_ri[ri_id] = (ri_type, ri_engine, args.region, expire_time, ri_count)

    if (now - ri_start_time) < datetime.timedelta(days=args.order_time):
        new_order_ri[ri_id] = (ri_type, ri_engine, args.region, expire_time, ri_count)

diff = dict([(x, reserved_instances[x] - running_instances.get(x, 0))
             for x in reserved_instances])

for pkey in running_instances:
    if pkey not in reserved_instances:
        diff[pkey] = -running_instances[pkey]

unused_ri = {}
unreserved_instances = {}
for k, v in six.iteritems(diff):
    if v > 0:
        unused_ri[k] = v
    elif v < 0:
        unreserved_instances[k] = -v

# Report
print("Reserved instances:")
print(instance_header())
for k, v in sorted(six.iteritems(reserved_instances), key=lambda x: x[0]):
    print("\t(%s)\t%12s\t%s\t%s" %(v, k[0], k[1], k[3]))
print("")

print("Unused reserved RDS instances:")
print(instance_header())
for k, v in sorted(six.iteritems(unused_ri), key=lambda x: x[0]):
    print("\t(%s)\t%12s\t%s\t%s" %(v, k[0], k[1], k[3]))
if not unused_ri:
    print("\tNone")
print("")

print("On-demand RDS instances, which haven't got a reserved RDS instance:")
print(instance_header())
for k, v in sorted(six.iteritems(unreserved_instances), key=lambda x: x[0]):
    print("\t(%s)\t%12s\t%s\t%s" %(v, k[0], k[1], k[3]))
if not unreserved_instances:
    print("\tNone")
print("")

print("Expiring soon (less than %sd) reserved RDS instances:" % args.warn_time)
print(expire_header())
for k, v in sorted(six.iteritems(soon_expire_ri), key=lambda x: x[1][:2]):
    print("\t(%s)\t%s\t%12s\t%s\t%s\t%s" %(
        v[4], k, v[0], v[1], v[2], v[3].strftime('%Y-%m-%d')))
if not soon_expire_ri:
    print("\tNone")
print("")

print("Expired RI (less than %sd) reserved RDS instances:" % args.expire_time)
print(expire_header())
for k, v in sorted(six.iteritems(expire_ri), key=lambda x: x[1][:2]):
    print("\t(%s)\t%s\t%12s\t%s\t%s\t%s" %(
        v[4], k, v[0], v[1], v[2], v[3].strftime('%Y-%m-%d')))
if not expire_ri:
    print("\tNone")
print("")

print("New Oder RI (less than %sd) reserved RDS instances:" % args.order_time)
print(expire_header())
for k, v in sorted(six.iteritems(new_order_ri), key=lambda x: x[1][:2]):
    print("\t(%s)\t%s\t%12s\t%s\t%s\t%s" %(
        v[4], k, v[0], v[1], v[2], v[3].strftime('%Y-%m-%d')))
if not new_order_ri:
    print("\tNone")
print("")

print("Running on-demand RDS instances: %s" % sum(running_instances.values()))
print("Reserved RDS instances:          %s" % sum(reserved_instances.values()))
print("")
